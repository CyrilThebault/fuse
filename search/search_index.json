{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FUSE in a nutshell The Framework for Understanding Structural Errors or FUSE is modular modelling framework (MMF) which enables the generation of a myriad of conceptual hydrological models by recombining elements from four commonly-used models. FUSE was build from scratch to be modular, it offers several options for each important modelling decision and enables the addition of new modules. In contrast, most traditional hydrological models rely on a single model structure (most processes are simulated by a single set of equations). FUSE modularity makes it easier to i) understand differences between models, ii) run a large ensemble of models, iii) capture the spatial variability of hydrological processes and iv) develop and improve hydrological models in a coordinated fashion across the community. Description and credits The FUSE initial implementation (FUSE1) is described in Clark et al. (WRR, 2008) . This implementation (which will become FUSE2) was created with users in mind and significantly increases the usability and range of applicability of FUSE1. In particular, it involves four main additional features: a snow module described in Henn et al. (WRR, 2015) , a calibration mode using Duan et al. (WRR, 1992) shuffled complex evolution algorithm (SCE), a distributed mode enabling to run FUSE on a grid, and all the input, output and parameter files are now NetCDF files.","title":"Home"},{"location":"#fuse-in-a-nutshell","text":"The Framework for Understanding Structural Errors or FUSE is modular modelling framework (MMF) which enables the generation of a myriad of conceptual hydrological models by recombining elements from four commonly-used models. FUSE was build from scratch to be modular, it offers several options for each important modelling decision and enables the addition of new modules. In contrast, most traditional hydrological models rely on a single model structure (most processes are simulated by a single set of equations). FUSE modularity makes it easier to i) understand differences between models, ii) run a large ensemble of models, iii) capture the spatial variability of hydrological processes and iv) develop and improve hydrological models in a coordinated fashion across the community.","title":"FUSE in a nutshell"},{"location":"#description-and-credits","text":"The FUSE initial implementation (FUSE1) is described in Clark et al. (WRR, 2008) . This implementation (which will become FUSE2) was created with users in mind and significantly increases the usability and range of applicability of FUSE1. In particular, it involves four main additional features: a snow module described in Henn et al. (WRR, 2015) , a calibration mode using Duan et al. (WRR, 1992) shuffled complex evolution algorithm (SCE), a distributed mode enabling to run FUSE on a grid, and all the input, output and parameter files are now NetCDF files.","title":"Description and credits"},{"location":"camels_for_fuse/","text":"CAMELS in a nutshell Input and parameter files for CAMELS","title":"CAMELS for FUSE"},{"location":"camels_for_fuse/#camels-in-a-nutshell","text":"","title":"CAMELS in a nutshell"},{"location":"camels_for_fuse/#input-and-parameter-files-for-camels","text":"","title":"Input and parameter files for CAMELS"},{"location":"execution_modes/","text":"Run FUSE using default parameter values at the catchment scale: ./fuse.exe fm_catch.txt us_09066300 run_def then calibrate it: ./fuse.exe fm_catch.txt us_09066300 calib_sce then run it with the best SCE parameter set: ./fuse.exe fm_catch.txt us_09066300 run_best where $1 is the file manager, $2 is the basin ID, $3 is the FUSE mode.","title":"Execution modes"},{"location":"tofu/","text":"Tools for FUSE (TOFU) are available on GitHub","title":"Tools for FUSE"},{"location":"files/file_manager/","text":"File 1 Purpose: This file... Structure: Example:","title":"File manager"},{"location":"files/file_manager/#file-1","text":"Purpose: This file... Structure: Example:","title":"File 1"},{"location":"files/input_files/","text":"Forcing time series Purpose: This file... Structure: Input info Purpose: This file... Structure: Elevation bands Purpose: This file... Structure:","title":"Input files"},{"location":"files/input_files/#forcing-time-series","text":"Purpose: This file... Structure:","title":"Forcing time series"},{"location":"files/input_files/#input-info","text":"Purpose: This file... Structure:","title":"Input info"},{"location":"files/input_files/#elevation-bands","text":"Purpose: This file... Structure:","title":"Elevation bands"},{"location":"files/output_files/","text":"File 1 Purpose: This file... Structure: Example:","title":"Output files"},{"location":"files/output_files/#file-1","text":"Purpose: This file... Structure: Example:","title":"File 1"},{"location":"files/settings_files/","text":"File 1 Purpose: This file... Structure: Example:","title":"Settings files"},{"location":"files/settings_files/#file-1","text":"Purpose: This file... Structure: Example:","title":"File 1"},{"location":"install/install_fuse/","text":"Notes on the computing environment This page will guide you through the installation of FUSE. Before you get started, please note that: below we assume that you will be compiling and running FUSE in a Linux/UNIX environment - for OS X/macOS, have a look at this page of the SUMMA manual, you will need a Fortran compiler - FUSE was developed and tested using ifort , which we recommend if you have no previous experience with Fortran compilers, note that to use ifort you might have to load the associated module (try module avail and then module add ), you will need access to the NetCDF and HDF libraries - use the libraries compiled with the compiler you selected above, you might have to load them (again, try module avail and module add ), then try which ncdump , as this should give you an idea of the path to the NetCDF libraries, the path to the HDF libraries should be similar. Note that these paths are machine-dependent. you will need data to test FUSE, we provide data for two test cases, start by downloading the data for the catchment test case . A. Fork the FUSE repository and compile FUSE Fork the FUSE repository to a directory $(MASTER) on your machine (see the SUMMA manual for a step-by-step procedure) Change directory to $(MASTER)/build/ and edit the Makefile by: defining the name of the master directory (line 11), defining the fortran compiler (line 27), defining the path to the NetCDF and HDF libraries (lines 34-35). Compile the SCE code (see Section H below). Compile the FUSE code (type make ). Change to $(MASTER)/bin/ and try running FUSE by typing ./fuse.exe . If the output is 1st command-line argument is missing (fileManager) , you have probably compiled FUSE correctly. B. Populate the bin directory To run FUSE, you must use a FILEMANAGER , which defines the paths to the FUSE settings , input , output directories, as well as other settings essential to run FUSE (described in Sections C and D). 1. Move the file fm_catch.txt provided for the catchment case study to $(MASTER)/bin/ . This is the FILEMANAGER for the catchment case study. 1. Update the lines 3 to 5 of fm_catch.txt using the path of the fuse_catch directory on your machine. C. Populate the settings directory The settings directory must contain the following files (provided for the catchment case study): The file M_DECISIONS (called fuse_zDecisions_902.txt in the case studies) describes the different options available in the FUSE modeling framework. These modeling decisions are described in detail by Clark et al. (WRR, 2008) , except decision 9 described in Henn et al. (WRR, 2015) . The file CONSTRAINTS (called fuse_zConstraints_snow.txt in the case studies) defines in particular the default parameter values and lower and upper parameter bounds. The list of parameters corresponds to those described in Clark et al. (WRR, 2008) and Henn et al. (WRR, 2015) . The file MOD_NUMERIX (called fuse_zNumerix.txt in the case studies) defines decisions regarding the numerical solution technique. Examples of the impact of these decisions are described by Clark and Kavetski (WRR 2010) and Kavetski and Clark (WRR 2010) . The file FORCINGINFO (called input_info.txt in the case studies) provides metadata for the NetCDF input file. It defines the name and units of the variables in the input file. D. Populate the input directory The input directory must contain the following files (provided for the catchment case study): The file forcefile (called us_09066300_input.nc in the catchment case study) contains the input data in a 2D (resp. 3D) arrays for modeling at the catchment (resp. grid) scale. The name of this file is made by appending the suffix_forcing defined in the FILEMANAGER (see B) to the basin ID (see E $2 ). The file BFILE (called us_09066300_elev_bands.nc in the catchment case study) describe the elevation bands required when the snow module is on. The dimensions of this file must match that of forcefile . The name of this file is made by appending the suffix_elev_bands defined in the FILEMANAGER (see B) to the basin ID (see E $2 ). Note that the dimension of the NetCDF files will determine if FUSE is run at the catchment or grid-scale. FUSE will look for the variables lat and lon and if they are arrays, it will run on the grid they define. This means that NetCDF input files for a single catchment must also include the variables lat and lon . E. Execute FUSE Run FUSE using default parameter values at the catchment scale: ./fuse.exe fm_catch.txt us_09066300 run_def then calibrate it: ./fuse.exe fm_catch.txt us_09066300 calib_sce then run it with the best SCE parameter set: ./fuse.exe fm_catch.txt us_09066300 run_best where $1 is the file manager, $2 is the basin ID, $3 is the FUSE mode. F. Content of the output directory Running FUSE in its different modes will create the following files in the output directory (provided for the catchment case study for comparison purposes): * the files whose name contains runs contain the simulations, * the files whose name contains para contain the parameter values, * the last element of the file name indicates which FUSE mode was used. G. Run FUSE for the grid case study Download the data for the grid scale case study (see FUSE modes and case studies section) and follow the same steps as for the catchment scale case study. Run FUSE unsing default parameter values over the grid: ./fuse.exe fm_grid.txt cesm1-cam5 run_def Note that because the gridded data does not contain streamflow, FUSE cannot be calibrated using SCE. Instead, FUSE can be run using pre-defined parameter sets using the run_pre mode (description to be added). H. Compile SCE The code of the shuffled complex evolution method ( $(MASTER)/build/FUSE_SRC/FUSE_SCE/sce.f ) was written in F77, so it must be compiled separately. If you use ifort , try the following flags: ifort -O2 -c -fixed sce_16plus.f If necessary, rename the compiled file, so that it can be found by the Makefile , which by default will be looking for a file named sce_16plus.o .","title":"Installation"},{"location":"install/install_fuse/#notes-on-the-computing-environment","text":"This page will guide you through the installation of FUSE. Before you get started, please note that: below we assume that you will be compiling and running FUSE in a Linux/UNIX environment - for OS X/macOS, have a look at this page of the SUMMA manual, you will need a Fortran compiler - FUSE was developed and tested using ifort , which we recommend if you have no previous experience with Fortran compilers, note that to use ifort you might have to load the associated module (try module avail and then module add ), you will need access to the NetCDF and HDF libraries - use the libraries compiled with the compiler you selected above, you might have to load them (again, try module avail and module add ), then try which ncdump , as this should give you an idea of the path to the NetCDF libraries, the path to the HDF libraries should be similar. Note that these paths are machine-dependent. you will need data to test FUSE, we provide data for two test cases, start by downloading the data for the catchment test case .","title":"Notes on the computing environment"},{"location":"install/install_fuse/#a-fork-the-fuse-repository-and-compile-fuse","text":"Fork the FUSE repository to a directory $(MASTER) on your machine (see the SUMMA manual for a step-by-step procedure) Change directory to $(MASTER)/build/ and edit the Makefile by: defining the name of the master directory (line 11), defining the fortran compiler (line 27), defining the path to the NetCDF and HDF libraries (lines 34-35). Compile the SCE code (see Section H below). Compile the FUSE code (type make ). Change to $(MASTER)/bin/ and try running FUSE by typing ./fuse.exe . If the output is 1st command-line argument is missing (fileManager) , you have probably compiled FUSE correctly.","title":"A. Fork the FUSE repository and compile FUSE"},{"location":"install/install_fuse/#b-populate-the-bin-directory","text":"To run FUSE, you must use a FILEMANAGER , which defines the paths to the FUSE settings , input , output directories, as well as other settings essential to run FUSE (described in Sections C and D). 1. Move the file fm_catch.txt provided for the catchment case study to $(MASTER)/bin/ . This is the FILEMANAGER for the catchment case study. 1. Update the lines 3 to 5 of fm_catch.txt using the path of the fuse_catch directory on your machine.","title":"B. Populate the bin directory"},{"location":"install/install_fuse/#c-populate-the-settings-directory","text":"The settings directory must contain the following files (provided for the catchment case study): The file M_DECISIONS (called fuse_zDecisions_902.txt in the case studies) describes the different options available in the FUSE modeling framework. These modeling decisions are described in detail by Clark et al. (WRR, 2008) , except decision 9 described in Henn et al. (WRR, 2015) . The file CONSTRAINTS (called fuse_zConstraints_snow.txt in the case studies) defines in particular the default parameter values and lower and upper parameter bounds. The list of parameters corresponds to those described in Clark et al. (WRR, 2008) and Henn et al. (WRR, 2015) . The file MOD_NUMERIX (called fuse_zNumerix.txt in the case studies) defines decisions regarding the numerical solution technique. Examples of the impact of these decisions are described by Clark and Kavetski (WRR 2010) and Kavetski and Clark (WRR 2010) . The file FORCINGINFO (called input_info.txt in the case studies) provides metadata for the NetCDF input file. It defines the name and units of the variables in the input file.","title":"C. Populate the settings directory"},{"location":"install/install_fuse/#d-populate-the-input-directory","text":"The input directory must contain the following files (provided for the catchment case study): The file forcefile (called us_09066300_input.nc in the catchment case study) contains the input data in a 2D (resp. 3D) arrays for modeling at the catchment (resp. grid) scale. The name of this file is made by appending the suffix_forcing defined in the FILEMANAGER (see B) to the basin ID (see E $2 ). The file BFILE (called us_09066300_elev_bands.nc in the catchment case study) describe the elevation bands required when the snow module is on. The dimensions of this file must match that of forcefile . The name of this file is made by appending the suffix_elev_bands defined in the FILEMANAGER (see B) to the basin ID (see E $2 ). Note that the dimension of the NetCDF files will determine if FUSE is run at the catchment or grid-scale. FUSE will look for the variables lat and lon and if they are arrays, it will run on the grid they define. This means that NetCDF input files for a single catchment must also include the variables lat and lon .","title":"D. Populate the input directory"},{"location":"install/install_fuse/#e-execute-fuse","text":"Run FUSE using default parameter values at the catchment scale: ./fuse.exe fm_catch.txt us_09066300 run_def then calibrate it: ./fuse.exe fm_catch.txt us_09066300 calib_sce then run it with the best SCE parameter set: ./fuse.exe fm_catch.txt us_09066300 run_best where $1 is the file manager, $2 is the basin ID, $3 is the FUSE mode.","title":"E. Execute FUSE"},{"location":"install/install_fuse/#f-content-of-the-output-directory","text":"Running FUSE in its different modes will create the following files in the output directory (provided for the catchment case study for comparison purposes): * the files whose name contains runs contain the simulations, * the files whose name contains para contain the parameter values, * the last element of the file name indicates which FUSE mode was used.","title":"F. Content of the output directory"},{"location":"install/install_fuse/#g-run-fuse-for-the-grid-case-study","text":"Download the data for the grid scale case study (see FUSE modes and case studies section) and follow the same steps as for the catchment scale case study. Run FUSE unsing default parameter values over the grid: ./fuse.exe fm_grid.txt cesm1-cam5 run_def Note that because the gridded data does not contain streamflow, FUSE cannot be calibrated using SCE. Instead, FUSE can be run using pre-defined parameter sets using the run_pre mode (description to be added).","title":"G. Run FUSE for the grid case study"},{"location":"install/install_fuse/#h-compile-sce","text":"The code of the shuffled complex evolution method ( $(MASTER)/build/FUSE_SRC/FUSE_SCE/sce.f ) was written in F77, so it must be compiled separately. If you use ifort , try the following flags: ifort -O2 -c -fixed sce_16plus.f If necessary, rename the compiled file, so that it can be found by the Makefile , which by default will be looking for a file named sce_16plus.o .","title":"H. Compile SCE"},{"location":"install/test_cases/","text":"To get you started with FUSE, we provide files for two test cases involving modeling at different spatial scales: catchment scale: forcing and streamflow data for the USGS 09066300 MIDDLE CREEK NEAR MINTURN, CO. catchment - available here [0.5MB] for download, grid scale: forcing from a climate model on a 1/8th degree grid for a 58 x 28 grid cells domain - available here [42MB] for download.","title":"Test cases"},{"location":"modules/1_precip/","text":"Option 1: Additive correction factor Option 2: Multiplicative correction factor","title":"Precipitation"},{"location":"modules/1_precip/#option-1-additive-correction-factor","text":"","title":"Option 1: Additive correction factor"},{"location":"modules/1_precip/#option-2-multiplicative-correction-factor","text":"","title":"Option 2: Multiplicative correction factor"}]}