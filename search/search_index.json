{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FUSE in a nutshell The Framework for Understanding Structural Errors or FUSE is modular modelling framework (MMF) which enables the generation of a myriad of conceptual hydrological models by recombining elements from four commonly-used models. FUSE was build from scratch to be modular, it offers several options for each important modelling decision and enables the addition of new modules. In contrast, most traditional hydrological models rely on a single model structure (most processes are simulated by a single set of equations). FUSE modularity makes it easier to i) understand differences between models, ii) run a large ensemble of models, iii) capture the spatial variability of hydrological processes and iv) develop and improve hydrological models in a coordinated fashion across the community. Description and credits FUSE initial implementation (FUSE1) is described in Clark et al. (WRR, 2008) . The implementation documented here (which will become FUSE2) was created with users in mind and significantly increases the usability and range of applicability of the original version. In particular, it involves four main additional features: a snow module described in Henn et al. (WRR, 2015) , a calibration mode based on the shuffled complex evolution algorithm (Duan et al., WRR, 1992) , a distributed mode enabling to run FUSE on a grid, and all the input, output and parameter files are now NetCDF files. License FUSE is distributed under the GNU Public License Version 3. For details see the file LICENSE in the FUSE root directory or visit the online version .","title":"Home"},{"location":"#fuse-in-a-nutshell","text":"The Framework for Understanding Structural Errors or FUSE is modular modelling framework (MMF) which enables the generation of a myriad of conceptual hydrological models by recombining elements from four commonly-used models. FUSE was build from scratch to be modular, it offers several options for each important modelling decision and enables the addition of new modules. In contrast, most traditional hydrological models rely on a single model structure (most processes are simulated by a single set of equations). FUSE modularity makes it easier to i) understand differences between models, ii) run a large ensemble of models, iii) capture the spatial variability of hydrological processes and iv) develop and improve hydrological models in a coordinated fashion across the community.","title":"FUSE in a nutshell"},{"location":"#description-and-credits","text":"FUSE initial implementation (FUSE1) is described in Clark et al. (WRR, 2008) . The implementation documented here (which will become FUSE2) was created with users in mind and significantly increases the usability and range of applicability of the original version. In particular, it involves four main additional features: a snow module described in Henn et al. (WRR, 2015) , a calibration mode based on the shuffled complex evolution algorithm (Duan et al., WRR, 1992) , a distributed mode enabling to run FUSE on a grid, and all the input, output and parameter files are now NetCDF files.","title":"Description and credits"},{"location":"#license","text":"FUSE is distributed under the GNU Public License Version 3. For details see the file LICENSE in the FUSE root directory or visit the online version .","title":"License"},{"location":"camels_for_fuse/","text":"CAMELS in a nutshell Input and parameter files for CAMELS","title":"CAMELS for FUSE"},{"location":"camels_for_fuse/#camels-in-a-nutshell","text":"","title":"CAMELS in a nutshell"},{"location":"camels_for_fuse/#input-and-parameter-files-for-camels","text":"","title":"Input and parameter files for CAMELS"},{"location":"execution_modes/","text":"Spatial configurations FUSE can be run for an individual catchment or on grid. The latter mode is designed to run FUSE over large domains and to conduct impact assessments using gridded simulations from climate models. FUSE will automatically adapt to the spatial configuration of the input files: the dimension of the NetCDF files will determine if FUSE is run at the catchment or grid-scale. FUSE will look for the variables lat and lon and if they are arrays, it will run on the grid they define. Parameter estimation modes Run can use three modes, all rely on the same syntax and the same three arguments: $1 is the file manager, $2 is the basin ID, $3 is the FUSE mode. Run FUSE using default parameter values: ./fuse.exe fm_catch.txt us_09066300 run_def then calibrate it: ./fuse.exe fm_catch.txt us_09066300 calib_sce then run it with the best SCE parameter set: ./fuse.exe fm_catch.txt us_09066300 run_best Note that because the gridded data does not contain streamflow, FUSE cannot be calibrated using SCE. Instead, FUSE can be run using pre-defined parameter sets using the run_pre mode (description to be added).","title":"Execution modes"},{"location":"execution_modes/#spatial-configurations","text":"FUSE can be run for an individual catchment or on grid. The latter mode is designed to run FUSE over large domains and to conduct impact assessments using gridded simulations from climate models. FUSE will automatically adapt to the spatial configuration of the input files: the dimension of the NetCDF files will determine if FUSE is run at the catchment or grid-scale. FUSE will look for the variables lat and lon and if they are arrays, it will run on the grid they define.","title":"Spatial configurations"},{"location":"execution_modes/#parameter-estimation-modes","text":"Run can use three modes, all rely on the same syntax and the same three arguments: $1 is the file manager, $2 is the basin ID, $3 is the FUSE mode. Run FUSE using default parameter values: ./fuse.exe fm_catch.txt us_09066300 run_def then calibrate it: ./fuse.exe fm_catch.txt us_09066300 calib_sce then run it with the best SCE parameter set: ./fuse.exe fm_catch.txt us_09066300 run_best Note that because the gridded data does not contain streamflow, FUSE cannot be calibrated using SCE. Instead, FUSE can be run using pre-defined parameter sets using the run_pre mode (description to be added).","title":"Parameter estimation modes"},{"location":"tofu/","text":"Tools for FUSE (TOFU) are available on GitHub","title":"Tools for FUSE"},{"location":"files/file_manager/","text":"File manager Purpose: To run, FUSE needs use FILEMANAGER , which defines the paths to the FUSE settings , input , output directories, as well as other settings essential to run FUSE (described in Sections C and D). Move the file fm_catch.txt provided for the catchment case study to $(MASTER)/bin/ . This is the FILEMANAGER for the catchment case study. Update the lines 3 to 5 of fm_catch.txt using the path of the fuse_catch directory on your machine. Format: ASCII Example:","title":"File manager"},{"location":"files/file_manager/#file-manager","text":"Purpose: To run, FUSE needs use FILEMANAGER , which defines the paths to the FUSE settings , input , output directories, as well as other settings essential to run FUSE (described in Sections C and D). Move the file fm_catch.txt provided for the catchment case study to $(MASTER)/bin/ . This is the FILEMANAGER for the catchment case study. Update the lines 3 to 5 of fm_catch.txt using the path of the fuse_catch directory on your machine. Format: ASCII Example:","title":"File manager"},{"location":"files/input_files/","text":"The input directory must contain the following files (provided for the catchment case study): Forcing time series Purpose: The file forcefile (called us_09066300_input.nc in the catchment case study) contains the input data in a 2D (resp. 3D) arrays for modeling at the catchment (resp. grid) scale. The name of this file is made by appending the suffix_forcing defined in the FILEMANAGER (see B) to the basin ID (see E $2 ). Requirements: The dimension of the NetCDF files will determine if FUSE is run at the catchment or grid-scale. FUSE will look for the variables lat and lon and if they are arrays, it will run on the grid they define. This means that NetCDF input files for a single catchment must also include the variables lat and lon . Format: NetCDF Elevation bands Purpose: The file BFILE (called us_09066300_elev_bands.nc in the catchment case study) describe the elevation bands required when the snow module is on. The dimensions of this file must match that of forcefile . The name of this file is made by appending the suffix_elev_bands defined in the FILEMANAGER (see B) to the basin ID (see E $2 ). Requirements:","title":"Input files"},{"location":"files/input_files/#forcing-time-series","text":"Purpose: The file forcefile (called us_09066300_input.nc in the catchment case study) contains the input data in a 2D (resp. 3D) arrays for modeling at the catchment (resp. grid) scale. The name of this file is made by appending the suffix_forcing defined in the FILEMANAGER (see B) to the basin ID (see E $2 ). Requirements: The dimension of the NetCDF files will determine if FUSE is run at the catchment or grid-scale. FUSE will look for the variables lat and lon and if they are arrays, it will run on the grid they define. This means that NetCDF input files for a single catchment must also include the variables lat and lon . Format: NetCDF","title":"Forcing time series"},{"location":"files/input_files/#elevation-bands","text":"Purpose: The file BFILE (called us_09066300_elev_bands.nc in the catchment case study) describe the elevation bands required when the snow module is on. The dimensions of this file must match that of forcefile . The name of this file is made by appending the suffix_elev_bands defined in the FILEMANAGER (see B) to the basin ID (see E $2 ). Requirements:","title":"Elevation bands"},{"location":"files/output_files/","text":"Running FUSE in its different modes will create the following files in the output directory (provided for the catchment case study for comparison purposes): the last element of the file name indicates which FUSE mode was used. Simulations files Purpose: the files whose name contains runs contain the simulations, i.e the time series. Structure: Example: Parameter files Purpose: the files whose name contains para contain the parameter values, Structure: Example:","title":"Output files"},{"location":"files/output_files/#simulations-files","text":"Purpose: the files whose name contains runs contain the simulations, i.e the time series. Structure: Example:","title":"Simulations files"},{"location":"files/output_files/#parameter-files","text":"Purpose: the files whose name contains para contain the parameter values, Structure: Example:","title":"Parameter files"},{"location":"files/settings_files/","text":"The settings directory must contain the following files (provided for the catchment case study): The file M_DECISIONS (called fuse_zDecisions_902.txt in the case studies) describes the different options available in the FUSE modeling framework. These modeling decisions are described in detail by Clark et al. (WRR, 2008) , except decision 9 described in Henn et al. (WRR, 2015) . The file CONSTRAINTS (called fuse_zConstraints_snow.txt in the case studies) defines in particular the default parameter values and lower and upper parameter bounds. The list of parameters corresponds to those described in Clark et al. (WRR, 2008) and Henn et al. (WRR, 2015) . The file MOD_NUMERIX (called fuse_zNumerix.txt in the case studies) defines decisions regarding the numerical solution technique. Examples of the impact of these decisions are described by Clark and Kavetski (WRR 2010) and Kavetski and Clark (WRR 2010) . The file FORCINGINFO (called input_info.txt in the case studies) provides metadata for the NetCDF input file. It defines the name and units of the variables in the input file.","title":"Settings files"},{"location":"install/install_fuse/","text":"Notes on the computing environment This page will guide you through the installation of FUSE. Before you get started, please note that: below we assume that you will be compiling and running FUSE in a Linux/UNIX environment - for OS X/macOS, have a look at this page of the SUMMA manual, you will need a Fortran compiler - FUSE was developed and tested using ifort , which we recommend if you have no previous experience with Fortran compilers, note that to use ifort you might have to load the associated module (try module avail and then module add ), you will need access to the NetCDF and HDF libraries - use the libraries compiled with the compiler you selected above, you might have to load them (again, try module avail and module add ), then try which ncdump , as this should give you an idea of the path to the NetCDF libraries, the path to the HDF libraries should be similar. Note that these paths are machine-dependent. 1. Fork the FUSE repository Fork the FUSE repository to a directory $(MASTER) on your machine (see the SUMMA manual for a step-by-step procedure) Change directory to $(MASTER)/build/ and edit the Makefile by: defining the name of the master directory (line 11), defining the fortran compiler (line 27), defining the path to the NetCDF and HDF libraries (lines 34-35). 2. Compile SCE FUSE relies on an algorithm called shuffled complex evolution (SCE) for automated parameter estimation. SCE code ( $(MASTER)/build/FUSE_SRC/FUSE_SCE/sce.f ) was written in Fortran 77, so it must be compiled separately, before FUSE is compiled. If you use ifort , try the following flags: ifort -O2 -c -fixed sce_16plus.f If necessary, rename the compiled file, so that it can be found by the Makefile , which by default will be looking for a file named sce_16plus.o . 3. Compile FUSE Compile the FUSE code (type make ). Change to $(MASTER)/bin/ and try running FUSE by typing ./fuse.exe . If the output is 1st command-line argument is missing (fileManager) , you have probably compiled FUSE correctly.","title":"Installation"},{"location":"install/install_fuse/#notes-on-the-computing-environment","text":"This page will guide you through the installation of FUSE. Before you get started, please note that: below we assume that you will be compiling and running FUSE in a Linux/UNIX environment - for OS X/macOS, have a look at this page of the SUMMA manual, you will need a Fortran compiler - FUSE was developed and tested using ifort , which we recommend if you have no previous experience with Fortran compilers, note that to use ifort you might have to load the associated module (try module avail and then module add ), you will need access to the NetCDF and HDF libraries - use the libraries compiled with the compiler you selected above, you might have to load them (again, try module avail and module add ), then try which ncdump , as this should give you an idea of the path to the NetCDF libraries, the path to the HDF libraries should be similar. Note that these paths are machine-dependent.","title":"Notes on the computing environment"},{"location":"install/install_fuse/#1-fork-the-fuse-repository","text":"Fork the FUSE repository to a directory $(MASTER) on your machine (see the SUMMA manual for a step-by-step procedure) Change directory to $(MASTER)/build/ and edit the Makefile by: defining the name of the master directory (line 11), defining the fortran compiler (line 27), defining the path to the NetCDF and HDF libraries (lines 34-35).","title":"1. Fork the FUSE repository"},{"location":"install/install_fuse/#2-compile-sce","text":"FUSE relies on an algorithm called shuffled complex evolution (SCE) for automated parameter estimation. SCE code ( $(MASTER)/build/FUSE_SRC/FUSE_SCE/sce.f ) was written in Fortran 77, so it must be compiled separately, before FUSE is compiled. If you use ifort , try the following flags: ifort -O2 -c -fixed sce_16plus.f If necessary, rename the compiled file, so that it can be found by the Makefile , which by default will be looking for a file named sce_16plus.o .","title":"2. Compile SCE"},{"location":"install/install_fuse/#3-compile-fuse","text":"Compile the FUSE code (type make ). Change to $(MASTER)/bin/ and try running FUSE by typing ./fuse.exe . If the output is 1st command-line argument is missing (fileManager) , you have probably compiled FUSE correctly.","title":"3. Compile FUSE"},{"location":"install/test_data/","text":"Data for two spatial configurations To get you started with FUSE, we provide data for two test cases. They will enable you to test FUSE in its two spatial configurations: FUSE can be run for an individual catchment or on grid (see Execution modes ). Catchment test case Observed atmospheric forcing and streamflow estimates for the catchment Middle Creek near Minturn in Colorado, USA - data available here [0.5MB] for download. This catchment is part of the CAMELS data set. Grid test case Atmospheric forcing simulated by a climate model on a 1/8th degree grid for a 58 x 28 grid cells domain - data available here [42MB] for download.","title":"Test data"},{"location":"install/test_data/#data-for-two-spatial-configurations","text":"To get you started with FUSE, we provide data for two test cases. They will enable you to test FUSE in its two spatial configurations: FUSE can be run for an individual catchment or on grid (see Execution modes ).","title":"Data for two spatial configurations"},{"location":"install/test_data/#catchment-test-case","text":"Observed atmospheric forcing and streamflow estimates for the catchment Middle Creek near Minturn in Colorado, USA - data available here [0.5MB] for download. This catchment is part of the CAMELS data set.","title":"Catchment test case"},{"location":"install/test_data/#grid-test-case","text":"Atmospheric forcing simulated by a climate model on a 1/8th degree grid for a 58 x 28 grid cells domain - data available here [42MB] for download.","title":"Grid test case"},{"location":"install/test_runs/","text":"Run FUSE for the catchment test case The three next steps will enable you to quickly test if FUSE is running as expected. The instructions below were purposefully kept short, but each element is described in detail in the rest of the documentation. If you haven't yet, download the data for the catchment test case to a directory $(data_catch) . Update the lines 3 to 5 of fm_catch.txt (this is the file manager) using the path of the $(data_catch) . Run FUSE using default parameter values (note run_def below): ./fuse.exe path_to_data_catch/fm_catch.txt us_09066300 run_def If FUSE runs and terminates with Done , you have setup FUSE correctly. Run FUSE for the grid case study If you haven't yet, download the data for the grid test case to a directory $(data_grid) . Update the lines 3 to 5 of fm_grid.txt (this is the file manager) using the path of the $(data_grid) . Run FUSE using default parameter values (note run_def below): ./fuse.exe path_to_data_grid/fm_grid.txt cesm1-cam5 run_def If FUSE runs and terminates with Done , you have setup FUSE correctly.","title":"Test runs"},{"location":"install/test_runs/#run-fuse-for-the-catchment-test-case","text":"The three next steps will enable you to quickly test if FUSE is running as expected. The instructions below were purposefully kept short, but each element is described in detail in the rest of the documentation. If you haven't yet, download the data for the catchment test case to a directory $(data_catch) . Update the lines 3 to 5 of fm_catch.txt (this is the file manager) using the path of the $(data_catch) . Run FUSE using default parameter values (note run_def below): ./fuse.exe path_to_data_catch/fm_catch.txt us_09066300 run_def If FUSE runs and terminates with Done , you have setup FUSE correctly.","title":"Run FUSE for the catchment test case"},{"location":"install/test_runs/#run-fuse-for-the-grid-case-study","text":"If you haven't yet, download the data for the grid test case to a directory $(data_grid) . Update the lines 3 to 5 of fm_grid.txt (this is the file manager) using the path of the $(data_grid) . Run FUSE using default parameter values (note run_def below): ./fuse.exe path_to_data_grid/fm_grid.txt cesm1-cam5 run_def If FUSE runs and terminates with Done , you have setup FUSE correctly.","title":"Run FUSE for the grid case study"},{"location":"modules/1_precip/","text":"Option 1: Additive correction factor Option 2: Multiplicative correction factor","title":"Precipitation"},{"location":"modules/1_precip/#option-1-additive-correction-factor","text":"","title":"Option 1: Additive correction factor"},{"location":"modules/1_precip/#option-2-multiplicative-correction-factor","text":"","title":"Option 2: Multiplicative correction factor"}]}