{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FUSE in a nutshell The Framework for Understanding Structural Errors or FUSE is modular modelling framework (MMF) which enables the generation of a myriad of conceptual hydrological models by recombining elements from four commonly-used models. FUSE was build from scratch to be modular, it offers several options for each important modelling decision and enables the addition of new modules. In contrast, most traditional hydrological models rely on a single model structure (most processes are simulated by a single set of equations). FUSE modularity makes it easier to i) understand differences between models, ii) run a large ensemble of models, iii) capture the spatial variability of hydrological processes and iv) develop and improve hydrological models in a coordinated fashion across the community. Description and credits FUSE initial implementation (FUSE1) is described in Clark et al. (WRR, 2008) . The implementation documented here (which will become FUSE2) was created with users in mind and significantly increases the usability and range of applicability of the original version. In particular, it involves 5 main additional features: an interface enabling the use of the different FUSE modes (default, calibration, regionalisation) a distributed mode enabling FUSE to run on a grid whilst efficiently managing memory, all the input, output and parameter files are now NetCDF files to improve reproducibility, a calibration mode based on the shuffled complex evolution algorithm (Duan et al., WRR, 1992) , a snow module described in Henn et al. (WRR, 2015) , License FUSE is distributed under the GNU Public License Version 3. For details see the file LICENSE in the FUSE root directory or visit the online version .","title":"Home"},{"location":"#fuse-in-a-nutshell","text":"The Framework for Understanding Structural Errors or FUSE is modular modelling framework (MMF) which enables the generation of a myriad of conceptual hydrological models by recombining elements from four commonly-used models. FUSE was build from scratch to be modular, it offers several options for each important modelling decision and enables the addition of new modules. In contrast, most traditional hydrological models rely on a single model structure (most processes are simulated by a single set of equations). FUSE modularity makes it easier to i) understand differences between models, ii) run a large ensemble of models, iii) capture the spatial variability of hydrological processes and iv) develop and improve hydrological models in a coordinated fashion across the community.","title":"FUSE in a nutshell"},{"location":"#description-and-credits","text":"FUSE initial implementation (FUSE1) is described in Clark et al. (WRR, 2008) . The implementation documented here (which will become FUSE2) was created with users in mind and significantly increases the usability and range of applicability of the original version. In particular, it involves 5 main additional features: an interface enabling the use of the different FUSE modes (default, calibration, regionalisation) a distributed mode enabling FUSE to run on a grid whilst efficiently managing memory, all the input, output and parameter files are now NetCDF files to improve reproducibility, a calibration mode based on the shuffled complex evolution algorithm (Duan et al., WRR, 1992) , a snow module described in Henn et al. (WRR, 2015) ,","title":"Description and credits"},{"location":"#license","text":"FUSE is distributed under the GNU Public License Version 3. For details see the file LICENSE in the FUSE root directory or visit the online version .","title":"License"},{"location":"camels_for_fuse/","text":"CAMELS in a nutshell Input and parameter files for CAMELS","title":"CAMELS for FUSE"},{"location":"camels_for_fuse/#camels-in-a-nutshell","text":"","title":"CAMELS in a nutshell"},{"location":"camels_for_fuse/#input-and-parameter-files-for-camels","text":"","title":"Input and parameter files for CAMELS"},{"location":"tofu/","text":"Tools for FUSE (TOFU) are available on GitHub","title":"Tools for FUSE"},{"location":"files/file_manager/","text":"File manager Purpose: To run, FUSE needs use FILEMANAGER , which defines the paths to the FUSE settings , input , output directories, as well as other settings essential to run FUSE (described in Sections C and D). Move the file fm_catch.txt provided for the catchment case study to $(MASTER)/bin/ . This is the FILEMANAGER for the catchment case study. Update the lines 3 to 5 of fm_catch.txt using the path of the fuse_catch directory on your machine. Format: ASCII Example:","title":"File manager"},{"location":"files/file_manager/#file-manager","text":"Purpose: To run, FUSE needs use FILEMANAGER , which defines the paths to the FUSE settings , input , output directories, as well as other settings essential to run FUSE (described in Sections C and D). Move the file fm_catch.txt provided for the catchment case study to $(MASTER)/bin/ . This is the FILEMANAGER for the catchment case study. Update the lines 3 to 5 of fm_catch.txt using the path of the fuse_catch directory on your machine. Format: ASCII Example:","title":"File manager"},{"location":"files/input_files/","text":"The input directory must contain the following files (provided for the catchment case study): Forcing time series Purpose: The file forcefile (called us_09066300_input.nc in the catchment case study) contains the input data in a 2D (resp. 3D) arrays for modeling at the catchment (resp. grid) scale. The name of this file is made by appending the suffix_forcing defined in the FILEMANAGER (see B) to the basin ID (see E $2 ). Requirements: The dimension of the NetCDF files will determine if FUSE is run at the catchment or grid-scale. FUSE will look for the variables lat and lon and if they are arrays, it will run on the grid they define. This means that NetCDF input files for a single catchment must also include the variables lat and lon . Format: NetCDF Elevation bands Purpose: The file BFILE (called us_09066300_elev_bands.nc in the catchment case study) describe the elevation bands required when the snow module is on. The dimensions of this file must match that of forcefile . The name of this file is made by appending the suffix_elev_bands defined in the FILEMANAGER (see B) to the basin ID (see E $2 ). Requirements:","title":"Input files"},{"location":"files/input_files/#forcing-time-series","text":"Purpose: The file forcefile (called us_09066300_input.nc in the catchment case study) contains the input data in a 2D (resp. 3D) arrays for modeling at the catchment (resp. grid) scale. The name of this file is made by appending the suffix_forcing defined in the FILEMANAGER (see B) to the basin ID (see E $2 ). Requirements: The dimension of the NetCDF files will determine if FUSE is run at the catchment or grid-scale. FUSE will look for the variables lat and lon and if they are arrays, it will run on the grid they define. This means that NetCDF input files for a single catchment must also include the variables lat and lon . Format: NetCDF","title":"Forcing time series"},{"location":"files/input_files/#elevation-bands","text":"Purpose: The file BFILE (called us_09066300_elev_bands.nc in the catchment case study) describe the elevation bands required when the snow module is on. The dimensions of this file must match that of forcefile . The name of this file is made by appending the suffix_elev_bands defined in the FILEMANAGER (see B) to the basin ID (see E $2 ). Requirements:","title":"Elevation bands"},{"location":"files/output_files/","text":"Running FUSE in its different modes will create the following files in the output directory (provided for the catchment case study for comparison purposes): the last element of the file name indicates which FUSE mode was used. Simulations files Purpose: the files whose name contains runs contain the simulations, i.e the time series. Structure: Example: Parameter files Purpose: the files whose name contains para contain the parameter values, Structure: Example:","title":"Output files"},{"location":"files/output_files/#simulations-files","text":"Purpose: the files whose name contains runs contain the simulations, i.e the time series. Structure: Example:","title":"Simulations files"},{"location":"files/output_files/#parameter-files","text":"Purpose: the files whose name contains para contain the parameter values, Structure: Example:","title":"Parameter files"},{"location":"files/settings_files/","text":"The settings directory must contain the following files (provided for the catchment case study): The file M_DECISIONS (called fuse_zDecisions_902.txt in the case studies) describes the different options available in the FUSE modeling framework. These modeling decisions are described in detail by Clark et al. (WRR, 2008) , except decision 9 described in Henn et al. (WRR, 2015) . The file CONSTRAINTS (called fuse_zConstraints_snow.txt in the case studies) defines in particular the default parameter values and lower and upper parameter bounds. The list of parameters corresponds to those described in Clark et al. (WRR, 2008) and Henn et al. (WRR, 2015) . The file MOD_NUMERIX (called fuse_zNumerix.txt in the case studies) defines decisions regarding the numerical solution technique. Examples of the impact of these decisions are described by Clark and Kavetski (WRR 2010) and Kavetski and Clark (WRR 2010) . The file FORCINGINFO (called input_info.txt in the case studies) provides metadata for the NetCDF input file. It defines the name and units of the variables in the input file.","title":"Settings files"},{"location":"install/install_fuse/","text":"Notes on the computing environment This page will guide you through the installation of FUSE. Before you get started, please note that: below we assume that you will be compiling and running FUSE in a Linux/UNIX environment - for OS X/macOS, have a look at this page of the SUMMA manual, you will need a Fortran compiler: FUSE was developed and tested using ifort , which we recommend if you have no previous experience with Fortran compilers - note that to use ifort you might have to load the associated module (try module avail and then module add [your/module/version/compiler] ), you will need access to the NetCDF and HDF libraries: use the libraries compiled with the compiler you selected above, you might have to load them - once loaded, try module show [your/module/version/compiler] this should provide the path to the libraries. Note that these paths are machine-dependent, so paths for another machine probably will not work on your machine. 1. Fork the FUSE repository Fork the FUSE repository to a directory $(MASTER) on your machine (see the SUMMA manual for a step-by-step procedure) Change directory to $(MASTER)/build/ and edit the Makefile by: defining the name of the master directory (line 11), defining the fortran compiler (line 27), defining the path to the NetCDF and HDF libraries (lines 34-35). 2. Compile SCE FUSE relies on an algorithm called shuffled complex evolution (SCE) for automated parameter estimation. SCE code ( $(MASTER)/build/FUSE_SRC/FUSE_SCE/sce.f ) was written in Fortran 77, so it must be compiled separately, before FUSE is compiled. If you use ifort , try the following flags: ifort -O2 -c -fixed sce_16plus.f If necessary, rename the compiled file, so that it can be found by the Makefile , which by default will be looking for a file named sce_16plus.o . 3. Compile FUSE Compile the FUSE code (type make ). Change to $(MASTER)/bin/ and try running FUSE by typing ./fuse.exe . If the output is 1st command-line argument is missing (fileManager) , you have probably compiled FUSE correctly.","title":"Installation"},{"location":"install/install_fuse/#notes-on-the-computing-environment","text":"This page will guide you through the installation of FUSE. Before you get started, please note that: below we assume that you will be compiling and running FUSE in a Linux/UNIX environment - for OS X/macOS, have a look at this page of the SUMMA manual, you will need a Fortran compiler: FUSE was developed and tested using ifort , which we recommend if you have no previous experience with Fortran compilers - note that to use ifort you might have to load the associated module (try module avail and then module add [your/module/version/compiler] ), you will need access to the NetCDF and HDF libraries: use the libraries compiled with the compiler you selected above, you might have to load them - once loaded, try module show [your/module/version/compiler] this should provide the path to the libraries. Note that these paths are machine-dependent, so paths for another machine probably will not work on your machine.","title":"Notes on the computing environment"},{"location":"install/install_fuse/#1-fork-the-fuse-repository","text":"Fork the FUSE repository to a directory $(MASTER) on your machine (see the SUMMA manual for a step-by-step procedure) Change directory to $(MASTER)/build/ and edit the Makefile by: defining the name of the master directory (line 11), defining the fortran compiler (line 27), defining the path to the NetCDF and HDF libraries (lines 34-35).","title":"1. Fork the FUSE repository"},{"location":"install/install_fuse/#2-compile-sce","text":"FUSE relies on an algorithm called shuffled complex evolution (SCE) for automated parameter estimation. SCE code ( $(MASTER)/build/FUSE_SRC/FUSE_SCE/sce.f ) was written in Fortran 77, so it must be compiled separately, before FUSE is compiled. If you use ifort , try the following flags: ifort -O2 -c -fixed sce_16plus.f If necessary, rename the compiled file, so that it can be found by the Makefile , which by default will be looking for a file named sce_16plus.o .","title":"2. Compile SCE"},{"location":"install/install_fuse/#3-compile-fuse","text":"Compile the FUSE code (type make ). Change to $(MASTER)/bin/ and try running FUSE by typing ./fuse.exe . If the output is 1st command-line argument is missing (fileManager) , you have probably compiled FUSE correctly.","title":"3. Compile FUSE"},{"location":"install/test_data/","text":"Data for two spatial configurations To get you started with FUSE, we provide data for two test cases. They will enable you to test FUSE in its two spatial configurations: FUSE can be run for an individual catchment or on a grid (see Execution modes ). Download the data for the two test cases in order to test FUSE . Catchment test case Observed atmospheric forcing and streamflow estimates for the catchment Middle Creek near Minturn in Colorado, USA - data available here [0.5MB] for download. This catchment is part of the CAMELS data set . Grid test case Atmospheric forcing simulated by a climate model on a 1/8th degree grid for a 58 x 28 grid cells domain - data available here [42MB] for download.","title":"Test data"},{"location":"install/test_data/#data-for-two-spatial-configurations","text":"To get you started with FUSE, we provide data for two test cases. They will enable you to test FUSE in its two spatial configurations: FUSE can be run for an individual catchment or on a grid (see Execution modes ). Download the data for the two test cases in order to test FUSE .","title":"Data for two spatial configurations"},{"location":"install/test_data/#catchment-test-case","text":"Observed atmospheric forcing and streamflow estimates for the catchment Middle Creek near Minturn in Colorado, USA - data available here [0.5MB] for download. This catchment is part of the CAMELS data set .","title":"Catchment test case"},{"location":"install/test_data/#grid-test-case","text":"Atmospheric forcing simulated by a climate model on a 1/8th degree grid for a 58 x 28 grid cells domain - data available here [42MB] for download.","title":"Grid test case"},{"location":"install/test_runs/","text":"Run FUSE for the catchment test case The steps below will enable you to test if FUSE is running as expected. The instructions below were purposefully kept short, but each element is described in detail in the rest of the documentation. If you haven't yet, download the data for the catchment test case to a directory $(data_catch) . Update the lines 3 to 5 of fm_catch.txt (this is the file manager) using the path of $(data_catch) . Run FUSE using default parameter values (note run_def below): ./fuse.exe path_to_data_catch/fm_catch.txt us_09066300 run_def If FUSE runs and terminates with Done , it is good sign. We will make simulations available with which you can compare your own simulations. Run FUSE for the grid case study If you haven't yet, download the data for the grid test case to a directory $(data_grid) . Update the lines 3 to 5 of fm_grid.txt (this is the file manager) using the path of the $(data_grid) . Run FUSE using default parameter values (note run_def below): ./fuse.exe path_to_data_grid/fm_grid.txt cesm1-cam5 run_def If FUSE runs and terminates with Done , it is a good. We will make simulations available with which you can compare your own simulations.","title":"Test runs"},{"location":"install/test_runs/#run-fuse-for-the-catchment-test-case","text":"The steps below will enable you to test if FUSE is running as expected. The instructions below were purposefully kept short, but each element is described in detail in the rest of the documentation. If you haven't yet, download the data for the catchment test case to a directory $(data_catch) . Update the lines 3 to 5 of fm_catch.txt (this is the file manager) using the path of $(data_catch) . Run FUSE using default parameter values (note run_def below): ./fuse.exe path_to_data_catch/fm_catch.txt us_09066300 run_def If FUSE runs and terminates with Done , it is good sign. We will make simulations available with which you can compare your own simulations.","title":"Run FUSE for the catchment test case"},{"location":"install/test_runs/#run-fuse-for-the-grid-case-study","text":"If you haven't yet, download the data for the grid test case to a directory $(data_grid) . Update the lines 3 to 5 of fm_grid.txt (this is the file manager) using the path of the $(data_grid) . Run FUSE using default parameter values (note run_def below): ./fuse.exe path_to_data_grid/fm_grid.txt cesm1-cam5 run_def If FUSE runs and terminates with Done , it is a good. We will make simulations available with which you can compare your own simulations.","title":"Run FUSE for the grid case study"},{"location":"modes/execution_modes/","text":"FUSE execution FUSE is executed using the following arguments: 1st argument : file manager , which sets the FUSE file systems, 2nd argument : region ID (the catchment us_09066300 is used as an example below), 3rd argument : parameter estimation mode (see below), 4th argument : parameter values (optional). Parameter estimation modes Parameter values can be set in different ways by using the following values for the third argument: Run using default parameter values - run_def The default parameter values defined in (add link to table) will be used, e.g.: ./fuse.exe fm_catch.txt us_09066300 run_def Calibrate parameters using SCE - calib_sce Parameter values will be estimated using SCE (see parameters in file managers) and saved in the output file ending in _sce_cal.nc , e.g.: ./fuse.exe fm_catch.txt us_09066300 calib_sce Run using the best SCE parameter set - run_best The best paramter set will be retrieved and used, the outfile will end _sce_best.nc , e.g.: ./fuse.exe fm_catch.txt us_09066300 run_best Run using pre-defined parameter values - run_pre FUSE will be run using pre-defined parameter sets, which will on the same grid as the input files, the outfile will end _pre.nc , e.g.: ./fuse.exe fm_catch.txt us_09066300 run_pre XXX","title":"Parameter estimation modes"},{"location":"modes/execution_modes/#fuse-execution","text":"FUSE is executed using the following arguments: 1st argument : file manager , which sets the FUSE file systems, 2nd argument : region ID (the catchment us_09066300 is used as an example below), 3rd argument : parameter estimation mode (see below), 4th argument : parameter values (optional).","title":"FUSE execution"},{"location":"modes/execution_modes/#parameter-estimation-modes","text":"Parameter values can be set in different ways by using the following values for the third argument: Run using default parameter values - run_def The default parameter values defined in (add link to table) will be used, e.g.: ./fuse.exe fm_catch.txt us_09066300 run_def Calibrate parameters using SCE - calib_sce Parameter values will be estimated using SCE (see parameters in file managers) and saved in the output file ending in _sce_cal.nc , e.g.: ./fuse.exe fm_catch.txt us_09066300 calib_sce Run using the best SCE parameter set - run_best The best paramter set will be retrieved and used, the outfile will end _sce_best.nc , e.g.: ./fuse.exe fm_catch.txt us_09066300 run_best Run using pre-defined parameter values - run_pre FUSE will be run using pre-defined parameter sets, which will on the same grid as the input files, the outfile will end _pre.nc , e.g.: ./fuse.exe fm_catch.txt us_09066300 run_pre XXX","title":"Parameter estimation modes"},{"location":"modes/spatial_modes/","text":"Spatial modes FUSE can be run in two spatial modes: Catchment mode: this mode is FUSE original mode, it runs FUSE for a single spatial unit and is ideal for rainfall-runoff modelling at the catchment scale. All the FUSE parameter estimation modes are available for this mode. Grid mode: this mode runs FUSE on a grid, it is designed to produce simulations over large domains and to conduct climate impact assessments driven by climate models. Spatially distributed atmospheric forcing is required and spatially distributed parameter values should be used. In this mode, model calibration using SCE is not possible, as daily gridded streamflow observations are not readily available. Instead, we recommend calibrating FUSE at the catchment scale, and transferring the entire parameter sets from donors catchments to individual grid cells. Note there is no lateral flow between the grid cells but runoff from adjacent cells can be routed over the entire domain using for instance MizuRoute . FUSE will automatically adapt to the spatial configuration of the input files. The catchment mode is actually a special case of the grid mode, as it essentially relies on a 1 x 1 grid. During its setup phase, FUSE will retrieve the lat and lon variables of the NetCDF forcing file and will then run on the grid they define. The output files will be produced using the same grid. Elevation bands: FUSE can use elevation bands to account for the effect of topography on temperature and precipitation within each spatial unit, regardless of whether it corresponds to a catchment or a grid cell.","title":"Spatial modes"},{"location":"modes/spatial_modes/#spatial-modes","text":"FUSE can be run in two spatial modes: Catchment mode: this mode is FUSE original mode, it runs FUSE for a single spatial unit and is ideal for rainfall-runoff modelling at the catchment scale. All the FUSE parameter estimation modes are available for this mode. Grid mode: this mode runs FUSE on a grid, it is designed to produce simulations over large domains and to conduct climate impact assessments driven by climate models. Spatially distributed atmospheric forcing is required and spatially distributed parameter values should be used. In this mode, model calibration using SCE is not possible, as daily gridded streamflow observations are not readily available. Instead, we recommend calibrating FUSE at the catchment scale, and transferring the entire parameter sets from donors catchments to individual grid cells. Note there is no lateral flow between the grid cells but runoff from adjacent cells can be routed over the entire domain using for instance MizuRoute . FUSE will automatically adapt to the spatial configuration of the input files. The catchment mode is actually a special case of the grid mode, as it essentially relies on a 1 x 1 grid. During its setup phase, FUSE will retrieve the lat and lon variables of the NetCDF forcing file and will then run on the grid they define. The output files will be produced using the same grid. Elevation bands: FUSE can use elevation bands to account for the effect of topography on temperature and precipitation within each spatial unit, regardless of whether it corresponds to a catchment or a grid cell.","title":"Spatial modes"},{"location":"modules/1_precip/","text":"Option 1: Additive correction factor Option 2: Multiplicative correction factor","title":"Precipitation"},{"location":"modules/1_precip/#option-1-additive-correction-factor","text":"","title":"Option 1: Additive correction factor"},{"location":"modules/1_precip/#option-2-multiplicative-correction-factor","text":"","title":"Option 2: Multiplicative correction factor"}]}